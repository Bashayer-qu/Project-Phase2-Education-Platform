
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CompletedCourse
 * 
 */
export type CompletedCourse = $Result.DefaultSelection<Prisma.$CompletedCoursePayload>
/**
 * Model InProgressCourse
 * 
 */
export type InProgressCourse = $Result.DefaultSelection<Prisma.$InProgressCoursePayload>
/**
 * Model PendingCourse
 * 
 */
export type PendingCourse = $Result.DefaultSelection<Prisma.$PendingCoursePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.completedCourse`: Exposes CRUD operations for the **CompletedCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompletedCourses
    * const completedCourses = await prisma.completedCourse.findMany()
    * ```
    */
  get completedCourse(): Prisma.CompletedCourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inProgressCourse`: Exposes CRUD operations for the **InProgressCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InProgressCourses
    * const inProgressCourses = await prisma.inProgressCourse.findMany()
    * ```
    */
  get inProgressCourse(): Prisma.InProgressCourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pendingCourse`: Exposes CRUD operations for the **PendingCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PendingCourses
    * const pendingCourses = await prisma.pendingCourse.findMany()
    * ```
    */
  get pendingCourse(): Prisma.PendingCourseDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CompletedCourse: 'CompletedCourse',
    InProgressCourse: 'InProgressCourse',
    PendingCourse: 'PendingCourse'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "completedCourse" | "inProgressCourse" | "pendingCourse"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CompletedCourse: {
        payload: Prisma.$CompletedCoursePayload<ExtArgs>
        fields: Prisma.CompletedCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompletedCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompletedCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          findFirst: {
            args: Prisma.CompletedCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompletedCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          findMany: {
            args: Prisma.CompletedCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>[]
          }
          create: {
            args: Prisma.CompletedCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          createMany: {
            args: Prisma.CompletedCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompletedCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>[]
          }
          delete: {
            args: Prisma.CompletedCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          update: {
            args: Prisma.CompletedCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          deleteMany: {
            args: Prisma.CompletedCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompletedCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompletedCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>[]
          }
          upsert: {
            args: Prisma.CompletedCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          aggregate: {
            args: Prisma.CompletedCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompletedCourse>
          }
          groupBy: {
            args: Prisma.CompletedCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompletedCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompletedCourseCountArgs<ExtArgs>
            result: $Utils.Optional<CompletedCourseCountAggregateOutputType> | number
          }
        }
      }
      InProgressCourse: {
        payload: Prisma.$InProgressCoursePayload<ExtArgs>
        fields: Prisma.InProgressCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InProgressCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InProgressCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>
          }
          findFirst: {
            args: Prisma.InProgressCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InProgressCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>
          }
          findMany: {
            args: Prisma.InProgressCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>[]
          }
          create: {
            args: Prisma.InProgressCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>
          }
          createMany: {
            args: Prisma.InProgressCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InProgressCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>[]
          }
          delete: {
            args: Prisma.InProgressCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>
          }
          update: {
            args: Prisma.InProgressCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>
          }
          deleteMany: {
            args: Prisma.InProgressCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InProgressCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InProgressCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>[]
          }
          upsert: {
            args: Prisma.InProgressCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InProgressCoursePayload>
          }
          aggregate: {
            args: Prisma.InProgressCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInProgressCourse>
          }
          groupBy: {
            args: Prisma.InProgressCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<InProgressCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.InProgressCourseCountArgs<ExtArgs>
            result: $Utils.Optional<InProgressCourseCountAggregateOutputType> | number
          }
        }
      }
      PendingCourse: {
        payload: Prisma.$PendingCoursePayload<ExtArgs>
        fields: Prisma.PendingCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PendingCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PendingCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          findFirst: {
            args: Prisma.PendingCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PendingCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          findMany: {
            args: Prisma.PendingCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>[]
          }
          create: {
            args: Prisma.PendingCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          createMany: {
            args: Prisma.PendingCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PendingCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>[]
          }
          delete: {
            args: Prisma.PendingCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          update: {
            args: Prisma.PendingCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          deleteMany: {
            args: Prisma.PendingCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PendingCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PendingCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>[]
          }
          upsert: {
            args: Prisma.PendingCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          aggregate: {
            args: Prisma.PendingCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePendingCourse>
          }
          groupBy: {
            args: Prisma.PendingCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<PendingCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PendingCourseCountArgs<ExtArgs>
            result: $Utils.Optional<PendingCourseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    completedCourse?: CompletedCourseOmit
    inProgressCourse?: InProgressCourseOmit
    pendingCourse?: PendingCourseOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    completedCourses: number
    inProgressCourses: number
    pendingCourses: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    completedCourses?: boolean | UserCountOutputTypeCountCompletedCoursesArgs
    inProgressCourses?: boolean | UserCountOutputTypeCountInProgressCoursesArgs
    pendingCourses?: boolean | UserCountOutputTypeCountPendingCoursesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompletedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompletedCourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInProgressCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InProgressCourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPendingCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendingCourseWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    surname: string | null
    username: string | null
    password: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    surname: string | null
    username: string | null
    password: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    surname: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    completedCourses?: boolean | User$completedCoursesArgs<ExtArgs>
    inProgressCourses?: boolean | User$inProgressCoursesArgs<ExtArgs>
    pendingCourses?: boolean | User$pendingCoursesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    surname?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "surname" | "username" | "password" | "role", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    completedCourses?: boolean | User$completedCoursesArgs<ExtArgs>
    inProgressCourses?: boolean | User$inProgressCoursesArgs<ExtArgs>
    pendingCourses?: boolean | User$pendingCoursesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      completedCourses: Prisma.$CompletedCoursePayload<ExtArgs>[]
      inProgressCourses: Prisma.$InProgressCoursePayload<ExtArgs>[]
      pendingCourses: Prisma.$PendingCoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      surname: string
      username: string
      password: string
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    completedCourses<T extends User$completedCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$completedCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inProgressCourses<T extends User$inProgressCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$inProgressCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pendingCourses<T extends User$pendingCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$pendingCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly surname: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.completedCourses
   */
  export type User$completedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    where?: CompletedCourseWhereInput
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    cursor?: CompletedCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * User.inProgressCourses
   */
  export type User$inProgressCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    where?: InProgressCourseWhereInput
    orderBy?: InProgressCourseOrderByWithRelationInput | InProgressCourseOrderByWithRelationInput[]
    cursor?: InProgressCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InProgressCourseScalarFieldEnum | InProgressCourseScalarFieldEnum[]
  }

  /**
   * User.pendingCourses
   */
  export type User$pendingCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    where?: PendingCourseWhereInput
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    cursor?: PendingCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CompletedCourse
   */

  export type AggregateCompletedCourse = {
    _count: CompletedCourseCountAggregateOutputType | null
    _min: CompletedCourseMinAggregateOutputType | null
    _max: CompletedCourseMaxAggregateOutputType | null
  }

  export type CompletedCourseMinAggregateOutputType = {
    id: string | null
    name: string | null
    grade: string | null
    userId: string | null
  }

  export type CompletedCourseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    grade: string | null
    userId: string | null
  }

  export type CompletedCourseCountAggregateOutputType = {
    id: number
    name: number
    grade: number
    userId: number
    _all: number
  }


  export type CompletedCourseMinAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    userId?: true
  }

  export type CompletedCourseMaxAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    userId?: true
  }

  export type CompletedCourseCountAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    userId?: true
    _all?: true
  }

  export type CompletedCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompletedCourse to aggregate.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompletedCourses
    **/
    _count?: true | CompletedCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompletedCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompletedCourseMaxAggregateInputType
  }

  export type GetCompletedCourseAggregateType<T extends CompletedCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCompletedCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompletedCourse[P]>
      : GetScalarType<T[P], AggregateCompletedCourse[P]>
  }




  export type CompletedCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompletedCourseWhereInput
    orderBy?: CompletedCourseOrderByWithAggregationInput | CompletedCourseOrderByWithAggregationInput[]
    by: CompletedCourseScalarFieldEnum[] | CompletedCourseScalarFieldEnum
    having?: CompletedCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompletedCourseCountAggregateInputType | true
    _min?: CompletedCourseMinAggregateInputType
    _max?: CompletedCourseMaxAggregateInputType
  }

  export type CompletedCourseGroupByOutputType = {
    id: string
    name: string
    grade: string
    userId: string
    _count: CompletedCourseCountAggregateOutputType | null
    _min: CompletedCourseMinAggregateOutputType | null
    _max: CompletedCourseMaxAggregateOutputType | null
  }

  type GetCompletedCourseGroupByPayload<T extends CompletedCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompletedCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompletedCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompletedCourseGroupByOutputType[P]>
            : GetScalarType<T[P], CompletedCourseGroupByOutputType[P]>
        }
      >
    >


  export type CompletedCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    grade?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["completedCourse"]>

  export type CompletedCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    grade?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["completedCourse"]>

  export type CompletedCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    grade?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["completedCourse"]>

  export type CompletedCourseSelectScalar = {
    id?: boolean
    name?: boolean
    grade?: boolean
    userId?: boolean
  }

  export type CompletedCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "grade" | "userId", ExtArgs["result"]["completedCourse"]>
  export type CompletedCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompletedCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompletedCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CompletedCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompletedCourse"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      grade: string
      userId: string
    }, ExtArgs["result"]["completedCourse"]>
    composites: {}
  }

  type CompletedCourseGetPayload<S extends boolean | null | undefined | CompletedCourseDefaultArgs> = $Result.GetResult<Prisma.$CompletedCoursePayload, S>

  type CompletedCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompletedCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompletedCourseCountAggregateInputType | true
    }

  export interface CompletedCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompletedCourse'], meta: { name: 'CompletedCourse' } }
    /**
     * Find zero or one CompletedCourse that matches the filter.
     * @param {CompletedCourseFindUniqueArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompletedCourseFindUniqueArgs>(args: SelectSubset<T, CompletedCourseFindUniqueArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompletedCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompletedCourseFindUniqueOrThrowArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompletedCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CompletedCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompletedCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseFindFirstArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompletedCourseFindFirstArgs>(args?: SelectSubset<T, CompletedCourseFindFirstArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompletedCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseFindFirstOrThrowArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompletedCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CompletedCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompletedCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompletedCourses
     * const completedCourses = await prisma.completedCourse.findMany()
     * 
     * // Get first 10 CompletedCourses
     * const completedCourses = await prisma.completedCourse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const completedCourseWithIdOnly = await prisma.completedCourse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompletedCourseFindManyArgs>(args?: SelectSubset<T, CompletedCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompletedCourse.
     * @param {CompletedCourseCreateArgs} args - Arguments to create a CompletedCourse.
     * @example
     * // Create one CompletedCourse
     * const CompletedCourse = await prisma.completedCourse.create({
     *   data: {
     *     // ... data to create a CompletedCourse
     *   }
     * })
     * 
     */
    create<T extends CompletedCourseCreateArgs>(args: SelectSubset<T, CompletedCourseCreateArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompletedCourses.
     * @param {CompletedCourseCreateManyArgs} args - Arguments to create many CompletedCourses.
     * @example
     * // Create many CompletedCourses
     * const completedCourse = await prisma.completedCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompletedCourseCreateManyArgs>(args?: SelectSubset<T, CompletedCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompletedCourses and returns the data saved in the database.
     * @param {CompletedCourseCreateManyAndReturnArgs} args - Arguments to create many CompletedCourses.
     * @example
     * // Create many CompletedCourses
     * const completedCourse = await prisma.completedCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompletedCourses and only return the `id`
     * const completedCourseWithIdOnly = await prisma.completedCourse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompletedCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CompletedCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompletedCourse.
     * @param {CompletedCourseDeleteArgs} args - Arguments to delete one CompletedCourse.
     * @example
     * // Delete one CompletedCourse
     * const CompletedCourse = await prisma.completedCourse.delete({
     *   where: {
     *     // ... filter to delete one CompletedCourse
     *   }
     * })
     * 
     */
    delete<T extends CompletedCourseDeleteArgs>(args: SelectSubset<T, CompletedCourseDeleteArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompletedCourse.
     * @param {CompletedCourseUpdateArgs} args - Arguments to update one CompletedCourse.
     * @example
     * // Update one CompletedCourse
     * const completedCourse = await prisma.completedCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompletedCourseUpdateArgs>(args: SelectSubset<T, CompletedCourseUpdateArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompletedCourses.
     * @param {CompletedCourseDeleteManyArgs} args - Arguments to filter CompletedCourses to delete.
     * @example
     * // Delete a few CompletedCourses
     * const { count } = await prisma.completedCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompletedCourseDeleteManyArgs>(args?: SelectSubset<T, CompletedCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompletedCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompletedCourses
     * const completedCourse = await prisma.completedCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompletedCourseUpdateManyArgs>(args: SelectSubset<T, CompletedCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompletedCourses and returns the data updated in the database.
     * @param {CompletedCourseUpdateManyAndReturnArgs} args - Arguments to update many CompletedCourses.
     * @example
     * // Update many CompletedCourses
     * const completedCourse = await prisma.completedCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompletedCourses and only return the `id`
     * const completedCourseWithIdOnly = await prisma.completedCourse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompletedCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CompletedCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompletedCourse.
     * @param {CompletedCourseUpsertArgs} args - Arguments to update or create a CompletedCourse.
     * @example
     * // Update or create a CompletedCourse
     * const completedCourse = await prisma.completedCourse.upsert({
     *   create: {
     *     // ... data to create a CompletedCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompletedCourse we want to update
     *   }
     * })
     */
    upsert<T extends CompletedCourseUpsertArgs>(args: SelectSubset<T, CompletedCourseUpsertArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompletedCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseCountArgs} args - Arguments to filter CompletedCourses to count.
     * @example
     * // Count the number of CompletedCourses
     * const count = await prisma.completedCourse.count({
     *   where: {
     *     // ... the filter for the CompletedCourses we want to count
     *   }
     * })
    **/
    count<T extends CompletedCourseCountArgs>(
      args?: Subset<T, CompletedCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompletedCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompletedCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompletedCourseAggregateArgs>(args: Subset<T, CompletedCourseAggregateArgs>): Prisma.PrismaPromise<GetCompletedCourseAggregateType<T>>

    /**
     * Group by CompletedCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompletedCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompletedCourseGroupByArgs['orderBy'] }
        : { orderBy?: CompletedCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompletedCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompletedCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompletedCourse model
   */
  readonly fields: CompletedCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompletedCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompletedCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompletedCourse model
   */
  interface CompletedCourseFieldRefs {
    readonly id: FieldRef<"CompletedCourse", 'String'>
    readonly name: FieldRef<"CompletedCourse", 'String'>
    readonly grade: FieldRef<"CompletedCourse", 'String'>
    readonly userId: FieldRef<"CompletedCourse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CompletedCourse findUnique
   */
  export type CompletedCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse findUniqueOrThrow
   */
  export type CompletedCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse findFirst
   */
  export type CompletedCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompletedCourses.
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompletedCourses.
     */
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * CompletedCourse findFirstOrThrow
   */
  export type CompletedCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompletedCourses.
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompletedCourses.
     */
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * CompletedCourse findMany
   */
  export type CompletedCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourses to fetch.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompletedCourses.
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * CompletedCourse create
   */
  export type CompletedCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a CompletedCourse.
     */
    data: XOR<CompletedCourseCreateInput, CompletedCourseUncheckedCreateInput>
  }

  /**
   * CompletedCourse createMany
   */
  export type CompletedCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompletedCourses.
     */
    data: CompletedCourseCreateManyInput | CompletedCourseCreateManyInput[]
  }

  /**
   * CompletedCourse createManyAndReturn
   */
  export type CompletedCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * The data used to create many CompletedCourses.
     */
    data: CompletedCourseCreateManyInput | CompletedCourseCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompletedCourse update
   */
  export type CompletedCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a CompletedCourse.
     */
    data: XOR<CompletedCourseUpdateInput, CompletedCourseUncheckedUpdateInput>
    /**
     * Choose, which CompletedCourse to update.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse updateMany
   */
  export type CompletedCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompletedCourses.
     */
    data: XOR<CompletedCourseUpdateManyMutationInput, CompletedCourseUncheckedUpdateManyInput>
    /**
     * Filter which CompletedCourses to update
     */
    where?: CompletedCourseWhereInput
    /**
     * Limit how many CompletedCourses to update.
     */
    limit?: number
  }

  /**
   * CompletedCourse updateManyAndReturn
   */
  export type CompletedCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * The data used to update CompletedCourses.
     */
    data: XOR<CompletedCourseUpdateManyMutationInput, CompletedCourseUncheckedUpdateManyInput>
    /**
     * Filter which CompletedCourses to update
     */
    where?: CompletedCourseWhereInput
    /**
     * Limit how many CompletedCourses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompletedCourse upsert
   */
  export type CompletedCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the CompletedCourse to update in case it exists.
     */
    where: CompletedCourseWhereUniqueInput
    /**
     * In case the CompletedCourse found by the `where` argument doesn't exist, create a new CompletedCourse with this data.
     */
    create: XOR<CompletedCourseCreateInput, CompletedCourseUncheckedCreateInput>
    /**
     * In case the CompletedCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompletedCourseUpdateInput, CompletedCourseUncheckedUpdateInput>
  }

  /**
   * CompletedCourse delete
   */
  export type CompletedCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter which CompletedCourse to delete.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse deleteMany
   */
  export type CompletedCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompletedCourses to delete
     */
    where?: CompletedCourseWhereInput
    /**
     * Limit how many CompletedCourses to delete.
     */
    limit?: number
  }

  /**
   * CompletedCourse without action
   */
  export type CompletedCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
  }


  /**
   * Model InProgressCourse
   */

  export type AggregateInProgressCourse = {
    _count: InProgressCourseCountAggregateOutputType | null
    _min: InProgressCourseMinAggregateOutputType | null
    _max: InProgressCourseMaxAggregateOutputType | null
  }

  export type InProgressCourseMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
  }

  export type InProgressCourseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
  }

  export type InProgressCourseCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    _all: number
  }


  export type InProgressCourseMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type InProgressCourseMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type InProgressCourseCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type InProgressCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InProgressCourse to aggregate.
     */
    where?: InProgressCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressCourses to fetch.
     */
    orderBy?: InProgressCourseOrderByWithRelationInput | InProgressCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InProgressCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InProgressCourses
    **/
    _count?: true | InProgressCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InProgressCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InProgressCourseMaxAggregateInputType
  }

  export type GetInProgressCourseAggregateType<T extends InProgressCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateInProgressCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInProgressCourse[P]>
      : GetScalarType<T[P], AggregateInProgressCourse[P]>
  }




  export type InProgressCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InProgressCourseWhereInput
    orderBy?: InProgressCourseOrderByWithAggregationInput | InProgressCourseOrderByWithAggregationInput[]
    by: InProgressCourseScalarFieldEnum[] | InProgressCourseScalarFieldEnum
    having?: InProgressCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InProgressCourseCountAggregateInputType | true
    _min?: InProgressCourseMinAggregateInputType
    _max?: InProgressCourseMaxAggregateInputType
  }

  export type InProgressCourseGroupByOutputType = {
    id: string
    name: string
    userId: string
    _count: InProgressCourseCountAggregateOutputType | null
    _min: InProgressCourseMinAggregateOutputType | null
    _max: InProgressCourseMaxAggregateOutputType | null
  }

  type GetInProgressCourseGroupByPayload<T extends InProgressCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InProgressCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InProgressCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InProgressCourseGroupByOutputType[P]>
            : GetScalarType<T[P], InProgressCourseGroupByOutputType[P]>
        }
      >
    >


  export type InProgressCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inProgressCourse"]>

  export type InProgressCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inProgressCourse"]>

  export type InProgressCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inProgressCourse"]>

  export type InProgressCourseSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
  }

  export type InProgressCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId", ExtArgs["result"]["inProgressCourse"]>
  export type InProgressCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InProgressCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InProgressCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InProgressCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InProgressCourse"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
    }, ExtArgs["result"]["inProgressCourse"]>
    composites: {}
  }

  type InProgressCourseGetPayload<S extends boolean | null | undefined | InProgressCourseDefaultArgs> = $Result.GetResult<Prisma.$InProgressCoursePayload, S>

  type InProgressCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InProgressCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InProgressCourseCountAggregateInputType | true
    }

  export interface InProgressCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InProgressCourse'], meta: { name: 'InProgressCourse' } }
    /**
     * Find zero or one InProgressCourse that matches the filter.
     * @param {InProgressCourseFindUniqueArgs} args - Arguments to find a InProgressCourse
     * @example
     * // Get one InProgressCourse
     * const inProgressCourse = await prisma.inProgressCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InProgressCourseFindUniqueArgs>(args: SelectSubset<T, InProgressCourseFindUniqueArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InProgressCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InProgressCourseFindUniqueOrThrowArgs} args - Arguments to find a InProgressCourse
     * @example
     * // Get one InProgressCourse
     * const inProgressCourse = await prisma.inProgressCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InProgressCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, InProgressCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InProgressCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressCourseFindFirstArgs} args - Arguments to find a InProgressCourse
     * @example
     * // Get one InProgressCourse
     * const inProgressCourse = await prisma.inProgressCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InProgressCourseFindFirstArgs>(args?: SelectSubset<T, InProgressCourseFindFirstArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InProgressCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressCourseFindFirstOrThrowArgs} args - Arguments to find a InProgressCourse
     * @example
     * // Get one InProgressCourse
     * const inProgressCourse = await prisma.inProgressCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InProgressCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, InProgressCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InProgressCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InProgressCourses
     * const inProgressCourses = await prisma.inProgressCourse.findMany()
     * 
     * // Get first 10 InProgressCourses
     * const inProgressCourses = await prisma.inProgressCourse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inProgressCourseWithIdOnly = await prisma.inProgressCourse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InProgressCourseFindManyArgs>(args?: SelectSubset<T, InProgressCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InProgressCourse.
     * @param {InProgressCourseCreateArgs} args - Arguments to create a InProgressCourse.
     * @example
     * // Create one InProgressCourse
     * const InProgressCourse = await prisma.inProgressCourse.create({
     *   data: {
     *     // ... data to create a InProgressCourse
     *   }
     * })
     * 
     */
    create<T extends InProgressCourseCreateArgs>(args: SelectSubset<T, InProgressCourseCreateArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InProgressCourses.
     * @param {InProgressCourseCreateManyArgs} args - Arguments to create many InProgressCourses.
     * @example
     * // Create many InProgressCourses
     * const inProgressCourse = await prisma.inProgressCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InProgressCourseCreateManyArgs>(args?: SelectSubset<T, InProgressCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InProgressCourses and returns the data saved in the database.
     * @param {InProgressCourseCreateManyAndReturnArgs} args - Arguments to create many InProgressCourses.
     * @example
     * // Create many InProgressCourses
     * const inProgressCourse = await prisma.inProgressCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InProgressCourses and only return the `id`
     * const inProgressCourseWithIdOnly = await prisma.inProgressCourse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InProgressCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, InProgressCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InProgressCourse.
     * @param {InProgressCourseDeleteArgs} args - Arguments to delete one InProgressCourse.
     * @example
     * // Delete one InProgressCourse
     * const InProgressCourse = await prisma.inProgressCourse.delete({
     *   where: {
     *     // ... filter to delete one InProgressCourse
     *   }
     * })
     * 
     */
    delete<T extends InProgressCourseDeleteArgs>(args: SelectSubset<T, InProgressCourseDeleteArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InProgressCourse.
     * @param {InProgressCourseUpdateArgs} args - Arguments to update one InProgressCourse.
     * @example
     * // Update one InProgressCourse
     * const inProgressCourse = await prisma.inProgressCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InProgressCourseUpdateArgs>(args: SelectSubset<T, InProgressCourseUpdateArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InProgressCourses.
     * @param {InProgressCourseDeleteManyArgs} args - Arguments to filter InProgressCourses to delete.
     * @example
     * // Delete a few InProgressCourses
     * const { count } = await prisma.inProgressCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InProgressCourseDeleteManyArgs>(args?: SelectSubset<T, InProgressCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InProgressCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InProgressCourses
     * const inProgressCourse = await prisma.inProgressCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InProgressCourseUpdateManyArgs>(args: SelectSubset<T, InProgressCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InProgressCourses and returns the data updated in the database.
     * @param {InProgressCourseUpdateManyAndReturnArgs} args - Arguments to update many InProgressCourses.
     * @example
     * // Update many InProgressCourses
     * const inProgressCourse = await prisma.inProgressCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InProgressCourses and only return the `id`
     * const inProgressCourseWithIdOnly = await prisma.inProgressCourse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InProgressCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, InProgressCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InProgressCourse.
     * @param {InProgressCourseUpsertArgs} args - Arguments to update or create a InProgressCourse.
     * @example
     * // Update or create a InProgressCourse
     * const inProgressCourse = await prisma.inProgressCourse.upsert({
     *   create: {
     *     // ... data to create a InProgressCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InProgressCourse we want to update
     *   }
     * })
     */
    upsert<T extends InProgressCourseUpsertArgs>(args: SelectSubset<T, InProgressCourseUpsertArgs<ExtArgs>>): Prisma__InProgressCourseClient<$Result.GetResult<Prisma.$InProgressCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InProgressCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressCourseCountArgs} args - Arguments to filter InProgressCourses to count.
     * @example
     * // Count the number of InProgressCourses
     * const count = await prisma.inProgressCourse.count({
     *   where: {
     *     // ... the filter for the InProgressCourses we want to count
     *   }
     * })
    **/
    count<T extends InProgressCourseCountArgs>(
      args?: Subset<T, InProgressCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InProgressCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InProgressCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InProgressCourseAggregateArgs>(args: Subset<T, InProgressCourseAggregateArgs>): Prisma.PrismaPromise<GetInProgressCourseAggregateType<T>>

    /**
     * Group by InProgressCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InProgressCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InProgressCourseGroupByArgs['orderBy'] }
        : { orderBy?: InProgressCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InProgressCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInProgressCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InProgressCourse model
   */
  readonly fields: InProgressCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InProgressCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InProgressCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InProgressCourse model
   */
  interface InProgressCourseFieldRefs {
    readonly id: FieldRef<"InProgressCourse", 'String'>
    readonly name: FieldRef<"InProgressCourse", 'String'>
    readonly userId: FieldRef<"InProgressCourse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InProgressCourse findUnique
   */
  export type InProgressCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * Filter, which InProgressCourse to fetch.
     */
    where: InProgressCourseWhereUniqueInput
  }

  /**
   * InProgressCourse findUniqueOrThrow
   */
  export type InProgressCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * Filter, which InProgressCourse to fetch.
     */
    where: InProgressCourseWhereUniqueInput
  }

  /**
   * InProgressCourse findFirst
   */
  export type InProgressCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * Filter, which InProgressCourse to fetch.
     */
    where?: InProgressCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressCourses to fetch.
     */
    orderBy?: InProgressCourseOrderByWithRelationInput | InProgressCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InProgressCourses.
     */
    cursor?: InProgressCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InProgressCourses.
     */
    distinct?: InProgressCourseScalarFieldEnum | InProgressCourseScalarFieldEnum[]
  }

  /**
   * InProgressCourse findFirstOrThrow
   */
  export type InProgressCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * Filter, which InProgressCourse to fetch.
     */
    where?: InProgressCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressCourses to fetch.
     */
    orderBy?: InProgressCourseOrderByWithRelationInput | InProgressCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InProgressCourses.
     */
    cursor?: InProgressCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InProgressCourses.
     */
    distinct?: InProgressCourseScalarFieldEnum | InProgressCourseScalarFieldEnum[]
  }

  /**
   * InProgressCourse findMany
   */
  export type InProgressCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * Filter, which InProgressCourses to fetch.
     */
    where?: InProgressCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressCourses to fetch.
     */
    orderBy?: InProgressCourseOrderByWithRelationInput | InProgressCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InProgressCourses.
     */
    cursor?: InProgressCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressCourses.
     */
    skip?: number
    distinct?: InProgressCourseScalarFieldEnum | InProgressCourseScalarFieldEnum[]
  }

  /**
   * InProgressCourse create
   */
  export type InProgressCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a InProgressCourse.
     */
    data: XOR<InProgressCourseCreateInput, InProgressCourseUncheckedCreateInput>
  }

  /**
   * InProgressCourse createMany
   */
  export type InProgressCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InProgressCourses.
     */
    data: InProgressCourseCreateManyInput | InProgressCourseCreateManyInput[]
  }

  /**
   * InProgressCourse createManyAndReturn
   */
  export type InProgressCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * The data used to create many InProgressCourses.
     */
    data: InProgressCourseCreateManyInput | InProgressCourseCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InProgressCourse update
   */
  export type InProgressCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a InProgressCourse.
     */
    data: XOR<InProgressCourseUpdateInput, InProgressCourseUncheckedUpdateInput>
    /**
     * Choose, which InProgressCourse to update.
     */
    where: InProgressCourseWhereUniqueInput
  }

  /**
   * InProgressCourse updateMany
   */
  export type InProgressCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InProgressCourses.
     */
    data: XOR<InProgressCourseUpdateManyMutationInput, InProgressCourseUncheckedUpdateManyInput>
    /**
     * Filter which InProgressCourses to update
     */
    where?: InProgressCourseWhereInput
    /**
     * Limit how many InProgressCourses to update.
     */
    limit?: number
  }

  /**
   * InProgressCourse updateManyAndReturn
   */
  export type InProgressCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * The data used to update InProgressCourses.
     */
    data: XOR<InProgressCourseUpdateManyMutationInput, InProgressCourseUncheckedUpdateManyInput>
    /**
     * Filter which InProgressCourses to update
     */
    where?: InProgressCourseWhereInput
    /**
     * Limit how many InProgressCourses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InProgressCourse upsert
   */
  export type InProgressCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the InProgressCourse to update in case it exists.
     */
    where: InProgressCourseWhereUniqueInput
    /**
     * In case the InProgressCourse found by the `where` argument doesn't exist, create a new InProgressCourse with this data.
     */
    create: XOR<InProgressCourseCreateInput, InProgressCourseUncheckedCreateInput>
    /**
     * In case the InProgressCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InProgressCourseUpdateInput, InProgressCourseUncheckedUpdateInput>
  }

  /**
   * InProgressCourse delete
   */
  export type InProgressCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
    /**
     * Filter which InProgressCourse to delete.
     */
    where: InProgressCourseWhereUniqueInput
  }

  /**
   * InProgressCourse deleteMany
   */
  export type InProgressCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InProgressCourses to delete
     */
    where?: InProgressCourseWhereInput
    /**
     * Limit how many InProgressCourses to delete.
     */
    limit?: number
  }

  /**
   * InProgressCourse without action
   */
  export type InProgressCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressCourse
     */
    select?: InProgressCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InProgressCourse
     */
    omit?: InProgressCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InProgressCourseInclude<ExtArgs> | null
  }


  /**
   * Model PendingCourse
   */

  export type AggregatePendingCourse = {
    _count: PendingCourseCountAggregateOutputType | null
    _min: PendingCourseMinAggregateOutputType | null
    _max: PendingCourseMaxAggregateOutputType | null
  }

  export type PendingCourseMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
  }

  export type PendingCourseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
  }

  export type PendingCourseCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    _all: number
  }


  export type PendingCourseMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type PendingCourseMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type PendingCourseCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type PendingCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PendingCourse to aggregate.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PendingCourses
    **/
    _count?: true | PendingCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PendingCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PendingCourseMaxAggregateInputType
  }

  export type GetPendingCourseAggregateType<T extends PendingCourseAggregateArgs> = {
        [P in keyof T & keyof AggregatePendingCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePendingCourse[P]>
      : GetScalarType<T[P], AggregatePendingCourse[P]>
  }




  export type PendingCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendingCourseWhereInput
    orderBy?: PendingCourseOrderByWithAggregationInput | PendingCourseOrderByWithAggregationInput[]
    by: PendingCourseScalarFieldEnum[] | PendingCourseScalarFieldEnum
    having?: PendingCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PendingCourseCountAggregateInputType | true
    _min?: PendingCourseMinAggregateInputType
    _max?: PendingCourseMaxAggregateInputType
  }

  export type PendingCourseGroupByOutputType = {
    id: string
    name: string
    userId: string
    _count: PendingCourseCountAggregateOutputType | null
    _min: PendingCourseMinAggregateOutputType | null
    _max: PendingCourseMaxAggregateOutputType | null
  }

  type GetPendingCourseGroupByPayload<T extends PendingCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PendingCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PendingCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PendingCourseGroupByOutputType[P]>
            : GetScalarType<T[P], PendingCourseGroupByOutputType[P]>
        }
      >
    >


  export type PendingCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pendingCourse"]>

  export type PendingCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pendingCourse"]>

  export type PendingCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pendingCourse"]>

  export type PendingCourseSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
  }

  export type PendingCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId", ExtArgs["result"]["pendingCourse"]>
  export type PendingCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PendingCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PendingCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PendingCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PendingCourse"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
    }, ExtArgs["result"]["pendingCourse"]>
    composites: {}
  }

  type PendingCourseGetPayload<S extends boolean | null | undefined | PendingCourseDefaultArgs> = $Result.GetResult<Prisma.$PendingCoursePayload, S>

  type PendingCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PendingCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PendingCourseCountAggregateInputType | true
    }

  export interface PendingCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PendingCourse'], meta: { name: 'PendingCourse' } }
    /**
     * Find zero or one PendingCourse that matches the filter.
     * @param {PendingCourseFindUniqueArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PendingCourseFindUniqueArgs>(args: SelectSubset<T, PendingCourseFindUniqueArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PendingCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PendingCourseFindUniqueOrThrowArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PendingCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, PendingCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PendingCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseFindFirstArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PendingCourseFindFirstArgs>(args?: SelectSubset<T, PendingCourseFindFirstArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PendingCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseFindFirstOrThrowArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PendingCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, PendingCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PendingCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PendingCourses
     * const pendingCourses = await prisma.pendingCourse.findMany()
     * 
     * // Get first 10 PendingCourses
     * const pendingCourses = await prisma.pendingCourse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pendingCourseWithIdOnly = await prisma.pendingCourse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PendingCourseFindManyArgs>(args?: SelectSubset<T, PendingCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PendingCourse.
     * @param {PendingCourseCreateArgs} args - Arguments to create a PendingCourse.
     * @example
     * // Create one PendingCourse
     * const PendingCourse = await prisma.pendingCourse.create({
     *   data: {
     *     // ... data to create a PendingCourse
     *   }
     * })
     * 
     */
    create<T extends PendingCourseCreateArgs>(args: SelectSubset<T, PendingCourseCreateArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PendingCourses.
     * @param {PendingCourseCreateManyArgs} args - Arguments to create many PendingCourses.
     * @example
     * // Create many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PendingCourseCreateManyArgs>(args?: SelectSubset<T, PendingCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PendingCourses and returns the data saved in the database.
     * @param {PendingCourseCreateManyAndReturnArgs} args - Arguments to create many PendingCourses.
     * @example
     * // Create many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PendingCourses and only return the `id`
     * const pendingCourseWithIdOnly = await prisma.pendingCourse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PendingCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, PendingCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PendingCourse.
     * @param {PendingCourseDeleteArgs} args - Arguments to delete one PendingCourse.
     * @example
     * // Delete one PendingCourse
     * const PendingCourse = await prisma.pendingCourse.delete({
     *   where: {
     *     // ... filter to delete one PendingCourse
     *   }
     * })
     * 
     */
    delete<T extends PendingCourseDeleteArgs>(args: SelectSubset<T, PendingCourseDeleteArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PendingCourse.
     * @param {PendingCourseUpdateArgs} args - Arguments to update one PendingCourse.
     * @example
     * // Update one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PendingCourseUpdateArgs>(args: SelectSubset<T, PendingCourseUpdateArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PendingCourses.
     * @param {PendingCourseDeleteManyArgs} args - Arguments to filter PendingCourses to delete.
     * @example
     * // Delete a few PendingCourses
     * const { count } = await prisma.pendingCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PendingCourseDeleteManyArgs>(args?: SelectSubset<T, PendingCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PendingCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PendingCourseUpdateManyArgs>(args: SelectSubset<T, PendingCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PendingCourses and returns the data updated in the database.
     * @param {PendingCourseUpdateManyAndReturnArgs} args - Arguments to update many PendingCourses.
     * @example
     * // Update many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PendingCourses and only return the `id`
     * const pendingCourseWithIdOnly = await prisma.pendingCourse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PendingCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, PendingCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PendingCourse.
     * @param {PendingCourseUpsertArgs} args - Arguments to update or create a PendingCourse.
     * @example
     * // Update or create a PendingCourse
     * const pendingCourse = await prisma.pendingCourse.upsert({
     *   create: {
     *     // ... data to create a PendingCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PendingCourse we want to update
     *   }
     * })
     */
    upsert<T extends PendingCourseUpsertArgs>(args: SelectSubset<T, PendingCourseUpsertArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PendingCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseCountArgs} args - Arguments to filter PendingCourses to count.
     * @example
     * // Count the number of PendingCourses
     * const count = await prisma.pendingCourse.count({
     *   where: {
     *     // ... the filter for the PendingCourses we want to count
     *   }
     * })
    **/
    count<T extends PendingCourseCountArgs>(
      args?: Subset<T, PendingCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PendingCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PendingCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PendingCourseAggregateArgs>(args: Subset<T, PendingCourseAggregateArgs>): Prisma.PrismaPromise<GetPendingCourseAggregateType<T>>

    /**
     * Group by PendingCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PendingCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PendingCourseGroupByArgs['orderBy'] }
        : { orderBy?: PendingCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PendingCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPendingCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PendingCourse model
   */
  readonly fields: PendingCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PendingCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PendingCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PendingCourse model
   */
  interface PendingCourseFieldRefs {
    readonly id: FieldRef<"PendingCourse", 'String'>
    readonly name: FieldRef<"PendingCourse", 'String'>
    readonly userId: FieldRef<"PendingCourse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PendingCourse findUnique
   */
  export type PendingCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse findUniqueOrThrow
   */
  export type PendingCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse findFirst
   */
  export type PendingCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PendingCourses.
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PendingCourses.
     */
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * PendingCourse findFirstOrThrow
   */
  export type PendingCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PendingCourses.
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PendingCourses.
     */
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * PendingCourse findMany
   */
  export type PendingCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourses to fetch.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PendingCourses.
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * PendingCourse create
   */
  export type PendingCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a PendingCourse.
     */
    data: XOR<PendingCourseCreateInput, PendingCourseUncheckedCreateInput>
  }

  /**
   * PendingCourse createMany
   */
  export type PendingCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PendingCourses.
     */
    data: PendingCourseCreateManyInput | PendingCourseCreateManyInput[]
  }

  /**
   * PendingCourse createManyAndReturn
   */
  export type PendingCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * The data used to create many PendingCourses.
     */
    data: PendingCourseCreateManyInput | PendingCourseCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PendingCourse update
   */
  export type PendingCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a PendingCourse.
     */
    data: XOR<PendingCourseUpdateInput, PendingCourseUncheckedUpdateInput>
    /**
     * Choose, which PendingCourse to update.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse updateMany
   */
  export type PendingCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PendingCourses.
     */
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyInput>
    /**
     * Filter which PendingCourses to update
     */
    where?: PendingCourseWhereInput
    /**
     * Limit how many PendingCourses to update.
     */
    limit?: number
  }

  /**
   * PendingCourse updateManyAndReturn
   */
  export type PendingCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * The data used to update PendingCourses.
     */
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyInput>
    /**
     * Filter which PendingCourses to update
     */
    where?: PendingCourseWhereInput
    /**
     * Limit how many PendingCourses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PendingCourse upsert
   */
  export type PendingCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the PendingCourse to update in case it exists.
     */
    where: PendingCourseWhereUniqueInput
    /**
     * In case the PendingCourse found by the `where` argument doesn't exist, create a new PendingCourse with this data.
     */
    create: XOR<PendingCourseCreateInput, PendingCourseUncheckedCreateInput>
    /**
     * In case the PendingCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PendingCourseUpdateInput, PendingCourseUncheckedUpdateInput>
  }

  /**
   * PendingCourse delete
   */
  export type PendingCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter which PendingCourse to delete.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse deleteMany
   */
  export type PendingCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PendingCourses to delete
     */
    where?: PendingCourseWhereInput
    /**
     * Limit how many PendingCourses to delete.
     */
    limit?: number
  }

  /**
   * PendingCourse without action
   */
  export type PendingCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surname: 'surname',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompletedCourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    grade: 'grade',
    userId: 'userId'
  };

  export type CompletedCourseScalarFieldEnum = (typeof CompletedCourseScalarFieldEnum)[keyof typeof CompletedCourseScalarFieldEnum]


  export const InProgressCourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId'
  };

  export type InProgressCourseScalarFieldEnum = (typeof InProgressCourseScalarFieldEnum)[keyof typeof InProgressCourseScalarFieldEnum]


  export const PendingCourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId'
  };

  export type PendingCourseScalarFieldEnum = (typeof PendingCourseScalarFieldEnum)[keyof typeof PendingCourseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    completedCourses?: CompletedCourseListRelationFilter
    inProgressCourses?: InProgressCourseListRelationFilter
    pendingCourses?: PendingCourseListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    completedCourses?: CompletedCourseOrderByRelationAggregateInput
    inProgressCourses?: InProgressCourseOrderByRelationAggregateInput
    pendingCourses?: PendingCourseOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    completedCourses?: CompletedCourseListRelationFilter
    inProgressCourses?: InProgressCourseListRelationFilter
    pendingCourses?: PendingCourseListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    surname?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type CompletedCourseWhereInput = {
    AND?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    OR?: CompletedCourseWhereInput[]
    NOT?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    id?: StringFilter<"CompletedCourse"> | string
    name?: StringFilter<"CompletedCourse"> | string
    grade?: StringFilter<"CompletedCourse"> | string
    userId?: StringFilter<"CompletedCourse"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CompletedCourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CompletedCourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    OR?: CompletedCourseWhereInput[]
    NOT?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    name?: StringFilter<"CompletedCourse"> | string
    grade?: StringFilter<"CompletedCourse"> | string
    userId?: StringFilter<"CompletedCourse"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CompletedCourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    userId?: SortOrder
    _count?: CompletedCourseCountOrderByAggregateInput
    _max?: CompletedCourseMaxOrderByAggregateInput
    _min?: CompletedCourseMinOrderByAggregateInput
  }

  export type CompletedCourseScalarWhereWithAggregatesInput = {
    AND?: CompletedCourseScalarWhereWithAggregatesInput | CompletedCourseScalarWhereWithAggregatesInput[]
    OR?: CompletedCourseScalarWhereWithAggregatesInput[]
    NOT?: CompletedCourseScalarWhereWithAggregatesInput | CompletedCourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompletedCourse"> | string
    name?: StringWithAggregatesFilter<"CompletedCourse"> | string
    grade?: StringWithAggregatesFilter<"CompletedCourse"> | string
    userId?: StringWithAggregatesFilter<"CompletedCourse"> | string
  }

  export type InProgressCourseWhereInput = {
    AND?: InProgressCourseWhereInput | InProgressCourseWhereInput[]
    OR?: InProgressCourseWhereInput[]
    NOT?: InProgressCourseWhereInput | InProgressCourseWhereInput[]
    id?: StringFilter<"InProgressCourse"> | string
    name?: StringFilter<"InProgressCourse"> | string
    userId?: StringFilter<"InProgressCourse"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InProgressCourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type InProgressCourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InProgressCourseWhereInput | InProgressCourseWhereInput[]
    OR?: InProgressCourseWhereInput[]
    NOT?: InProgressCourseWhereInput | InProgressCourseWhereInput[]
    name?: StringFilter<"InProgressCourse"> | string
    userId?: StringFilter<"InProgressCourse"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type InProgressCourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: InProgressCourseCountOrderByAggregateInput
    _max?: InProgressCourseMaxOrderByAggregateInput
    _min?: InProgressCourseMinOrderByAggregateInput
  }

  export type InProgressCourseScalarWhereWithAggregatesInput = {
    AND?: InProgressCourseScalarWhereWithAggregatesInput | InProgressCourseScalarWhereWithAggregatesInput[]
    OR?: InProgressCourseScalarWhereWithAggregatesInput[]
    NOT?: InProgressCourseScalarWhereWithAggregatesInput | InProgressCourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InProgressCourse"> | string
    name?: StringWithAggregatesFilter<"InProgressCourse"> | string
    userId?: StringWithAggregatesFilter<"InProgressCourse"> | string
  }

  export type PendingCourseWhereInput = {
    AND?: PendingCourseWhereInput | PendingCourseWhereInput[]
    OR?: PendingCourseWhereInput[]
    NOT?: PendingCourseWhereInput | PendingCourseWhereInput[]
    id?: StringFilter<"PendingCourse"> | string
    name?: StringFilter<"PendingCourse"> | string
    userId?: StringFilter<"PendingCourse"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PendingCourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PendingCourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PendingCourseWhereInput | PendingCourseWhereInput[]
    OR?: PendingCourseWhereInput[]
    NOT?: PendingCourseWhereInput | PendingCourseWhereInput[]
    name?: StringFilter<"PendingCourse"> | string
    userId?: StringFilter<"PendingCourse"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PendingCourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: PendingCourseCountOrderByAggregateInput
    _max?: PendingCourseMaxOrderByAggregateInput
    _min?: PendingCourseMinOrderByAggregateInput
  }

  export type PendingCourseScalarWhereWithAggregatesInput = {
    AND?: PendingCourseScalarWhereWithAggregatesInput | PendingCourseScalarWhereWithAggregatesInput[]
    OR?: PendingCourseScalarWhereWithAggregatesInput[]
    NOT?: PendingCourseScalarWhereWithAggregatesInput | PendingCourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PendingCourse"> | string
    name?: StringWithAggregatesFilter<"PendingCourse"> | string
    userId?: StringWithAggregatesFilter<"PendingCourse"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    completedCourses?: CompletedCourseCreateNestedManyWithoutUserInput
    inProgressCourses?: InProgressCourseCreateNestedManyWithoutUserInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutUserInput
    inProgressCourses?: InProgressCourseUncheckedCreateNestedManyWithoutUserInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUpdateManyWithoutUserNestedInput
    inProgressCourses?: InProgressCourseUpdateManyWithoutUserNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutUserNestedInput
    inProgressCourses?: InProgressCourseUncheckedUpdateManyWithoutUserNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseCreateInput = {
    id?: string
    name: string
    grade: string
    user: UserCreateNestedOneWithoutCompletedCoursesInput
  }

  export type CompletedCourseUncheckedCreateInput = {
    id?: string
    name: string
    grade: string
    userId: string
  }

  export type CompletedCourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCompletedCoursesNestedInput
  }

  export type CompletedCourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseCreateManyInput = {
    id?: string
    name: string
    grade: string
    userId: string
  }

  export type CompletedCourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type InProgressCourseCreateInput = {
    id?: string
    name: string
    user: UserCreateNestedOneWithoutInProgressCoursesInput
  }

  export type InProgressCourseUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
  }

  export type InProgressCourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInProgressCoursesNestedInput
  }

  export type InProgressCourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type InProgressCourseCreateManyInput = {
    id?: string
    name: string
    userId: string
  }

  export type InProgressCourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InProgressCourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseCreateInput = {
    id?: string
    name: string
    user: UserCreateNestedOneWithoutPendingCoursesInput
  }

  export type PendingCourseUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
  }

  export type PendingCourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPendingCoursesNestedInput
  }

  export type PendingCourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseCreateManyInput = {
    id?: string
    name: string
    userId: string
  }

  export type PendingCourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type CompletedCourseListRelationFilter = {
    every?: CompletedCourseWhereInput
    some?: CompletedCourseWhereInput
    none?: CompletedCourseWhereInput
  }

  export type InProgressCourseListRelationFilter = {
    every?: InProgressCourseWhereInput
    some?: InProgressCourseWhereInput
    none?: InProgressCourseWhereInput
  }

  export type PendingCourseListRelationFilter = {
    every?: PendingCourseWhereInput
    some?: PendingCourseWhereInput
    none?: PendingCourseWhereInput
  }

  export type CompletedCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InProgressCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PendingCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CompletedCourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    userId?: SortOrder
  }

  export type CompletedCourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    userId?: SortOrder
  }

  export type CompletedCourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    userId?: SortOrder
  }

  export type InProgressCourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type InProgressCourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type InProgressCourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type PendingCourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type PendingCourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type PendingCourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type CompletedCourseCreateNestedManyWithoutUserInput = {
    create?: XOR<CompletedCourseCreateWithoutUserInput, CompletedCourseUncheckedCreateWithoutUserInput> | CompletedCourseCreateWithoutUserInput[] | CompletedCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutUserInput | CompletedCourseCreateOrConnectWithoutUserInput[]
    createMany?: CompletedCourseCreateManyUserInputEnvelope
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
  }

  export type InProgressCourseCreateNestedManyWithoutUserInput = {
    create?: XOR<InProgressCourseCreateWithoutUserInput, InProgressCourseUncheckedCreateWithoutUserInput> | InProgressCourseCreateWithoutUserInput[] | InProgressCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InProgressCourseCreateOrConnectWithoutUserInput | InProgressCourseCreateOrConnectWithoutUserInput[]
    createMany?: InProgressCourseCreateManyUserInputEnvelope
    connect?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
  }

  export type PendingCourseCreateNestedManyWithoutUserInput = {
    create?: XOR<PendingCourseCreateWithoutUserInput, PendingCourseUncheckedCreateWithoutUserInput> | PendingCourseCreateWithoutUserInput[] | PendingCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutUserInput | PendingCourseCreateOrConnectWithoutUserInput[]
    createMany?: PendingCourseCreateManyUserInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type CompletedCourseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CompletedCourseCreateWithoutUserInput, CompletedCourseUncheckedCreateWithoutUserInput> | CompletedCourseCreateWithoutUserInput[] | CompletedCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutUserInput | CompletedCourseCreateOrConnectWithoutUserInput[]
    createMany?: CompletedCourseCreateManyUserInputEnvelope
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
  }

  export type InProgressCourseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InProgressCourseCreateWithoutUserInput, InProgressCourseUncheckedCreateWithoutUserInput> | InProgressCourseCreateWithoutUserInput[] | InProgressCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InProgressCourseCreateOrConnectWithoutUserInput | InProgressCourseCreateOrConnectWithoutUserInput[]
    createMany?: InProgressCourseCreateManyUserInputEnvelope
    connect?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
  }

  export type PendingCourseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PendingCourseCreateWithoutUserInput, PendingCourseUncheckedCreateWithoutUserInput> | PendingCourseCreateWithoutUserInput[] | PendingCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutUserInput | PendingCourseCreateOrConnectWithoutUserInput[]
    createMany?: PendingCourseCreateManyUserInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CompletedCourseUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompletedCourseCreateWithoutUserInput, CompletedCourseUncheckedCreateWithoutUserInput> | CompletedCourseCreateWithoutUserInput[] | CompletedCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutUserInput | CompletedCourseCreateOrConnectWithoutUserInput[]
    upsert?: CompletedCourseUpsertWithWhereUniqueWithoutUserInput | CompletedCourseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompletedCourseCreateManyUserInputEnvelope
    set?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    disconnect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    delete?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    update?: CompletedCourseUpdateWithWhereUniqueWithoutUserInput | CompletedCourseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompletedCourseUpdateManyWithWhereWithoutUserInput | CompletedCourseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
  }

  export type InProgressCourseUpdateManyWithoutUserNestedInput = {
    create?: XOR<InProgressCourseCreateWithoutUserInput, InProgressCourseUncheckedCreateWithoutUserInput> | InProgressCourseCreateWithoutUserInput[] | InProgressCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InProgressCourseCreateOrConnectWithoutUserInput | InProgressCourseCreateOrConnectWithoutUserInput[]
    upsert?: InProgressCourseUpsertWithWhereUniqueWithoutUserInput | InProgressCourseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InProgressCourseCreateManyUserInputEnvelope
    set?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    disconnect?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    delete?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    connect?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    update?: InProgressCourseUpdateWithWhereUniqueWithoutUserInput | InProgressCourseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InProgressCourseUpdateManyWithWhereWithoutUserInput | InProgressCourseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InProgressCourseScalarWhereInput | InProgressCourseScalarWhereInput[]
  }

  export type PendingCourseUpdateManyWithoutUserNestedInput = {
    create?: XOR<PendingCourseCreateWithoutUserInput, PendingCourseUncheckedCreateWithoutUserInput> | PendingCourseCreateWithoutUserInput[] | PendingCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutUserInput | PendingCourseCreateOrConnectWithoutUserInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutUserInput | PendingCourseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PendingCourseCreateManyUserInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutUserInput | PendingCourseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutUserInput | PendingCourseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type CompletedCourseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompletedCourseCreateWithoutUserInput, CompletedCourseUncheckedCreateWithoutUserInput> | CompletedCourseCreateWithoutUserInput[] | CompletedCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutUserInput | CompletedCourseCreateOrConnectWithoutUserInput[]
    upsert?: CompletedCourseUpsertWithWhereUniqueWithoutUserInput | CompletedCourseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompletedCourseCreateManyUserInputEnvelope
    set?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    disconnect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    delete?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    update?: CompletedCourseUpdateWithWhereUniqueWithoutUserInput | CompletedCourseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompletedCourseUpdateManyWithWhereWithoutUserInput | CompletedCourseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
  }

  export type InProgressCourseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InProgressCourseCreateWithoutUserInput, InProgressCourseUncheckedCreateWithoutUserInput> | InProgressCourseCreateWithoutUserInput[] | InProgressCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InProgressCourseCreateOrConnectWithoutUserInput | InProgressCourseCreateOrConnectWithoutUserInput[]
    upsert?: InProgressCourseUpsertWithWhereUniqueWithoutUserInput | InProgressCourseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InProgressCourseCreateManyUserInputEnvelope
    set?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    disconnect?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    delete?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    connect?: InProgressCourseWhereUniqueInput | InProgressCourseWhereUniqueInput[]
    update?: InProgressCourseUpdateWithWhereUniqueWithoutUserInput | InProgressCourseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InProgressCourseUpdateManyWithWhereWithoutUserInput | InProgressCourseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InProgressCourseScalarWhereInput | InProgressCourseScalarWhereInput[]
  }

  export type PendingCourseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PendingCourseCreateWithoutUserInput, PendingCourseUncheckedCreateWithoutUserInput> | PendingCourseCreateWithoutUserInput[] | PendingCourseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutUserInput | PendingCourseCreateOrConnectWithoutUserInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutUserInput | PendingCourseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PendingCourseCreateManyUserInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutUserInput | PendingCourseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutUserInput | PendingCourseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCompletedCoursesInput = {
    create?: XOR<UserCreateWithoutCompletedCoursesInput, UserUncheckedCreateWithoutCompletedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompletedCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCompletedCoursesNestedInput = {
    create?: XOR<UserCreateWithoutCompletedCoursesInput, UserUncheckedCreateWithoutCompletedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompletedCoursesInput
    upsert?: UserUpsertWithoutCompletedCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompletedCoursesInput, UserUpdateWithoutCompletedCoursesInput>, UserUncheckedUpdateWithoutCompletedCoursesInput>
  }

  export type UserCreateNestedOneWithoutInProgressCoursesInput = {
    create?: XOR<UserCreateWithoutInProgressCoursesInput, UserUncheckedCreateWithoutInProgressCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInProgressCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInProgressCoursesNestedInput = {
    create?: XOR<UserCreateWithoutInProgressCoursesInput, UserUncheckedCreateWithoutInProgressCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInProgressCoursesInput
    upsert?: UserUpsertWithoutInProgressCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInProgressCoursesInput, UserUpdateWithoutInProgressCoursesInput>, UserUncheckedUpdateWithoutInProgressCoursesInput>
  }

  export type UserCreateNestedOneWithoutPendingCoursesInput = {
    create?: XOR<UserCreateWithoutPendingCoursesInput, UserUncheckedCreateWithoutPendingCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPendingCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPendingCoursesNestedInput = {
    create?: XOR<UserCreateWithoutPendingCoursesInput, UserUncheckedCreateWithoutPendingCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPendingCoursesInput
    upsert?: UserUpsertWithoutPendingCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPendingCoursesInput, UserUpdateWithoutPendingCoursesInput>, UserUncheckedUpdateWithoutPendingCoursesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CompletedCourseCreateWithoutUserInput = {
    id?: string
    name: string
    grade: string
  }

  export type CompletedCourseUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    grade: string
  }

  export type CompletedCourseCreateOrConnectWithoutUserInput = {
    where: CompletedCourseWhereUniqueInput
    create: XOR<CompletedCourseCreateWithoutUserInput, CompletedCourseUncheckedCreateWithoutUserInput>
  }

  export type CompletedCourseCreateManyUserInputEnvelope = {
    data: CompletedCourseCreateManyUserInput | CompletedCourseCreateManyUserInput[]
  }

  export type InProgressCourseCreateWithoutUserInput = {
    id?: string
    name: string
  }

  export type InProgressCourseUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
  }

  export type InProgressCourseCreateOrConnectWithoutUserInput = {
    where: InProgressCourseWhereUniqueInput
    create: XOR<InProgressCourseCreateWithoutUserInput, InProgressCourseUncheckedCreateWithoutUserInput>
  }

  export type InProgressCourseCreateManyUserInputEnvelope = {
    data: InProgressCourseCreateManyUserInput | InProgressCourseCreateManyUserInput[]
  }

  export type PendingCourseCreateWithoutUserInput = {
    id?: string
    name: string
  }

  export type PendingCourseUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
  }

  export type PendingCourseCreateOrConnectWithoutUserInput = {
    where: PendingCourseWhereUniqueInput
    create: XOR<PendingCourseCreateWithoutUserInput, PendingCourseUncheckedCreateWithoutUserInput>
  }

  export type PendingCourseCreateManyUserInputEnvelope = {
    data: PendingCourseCreateManyUserInput | PendingCourseCreateManyUserInput[]
  }

  export type CompletedCourseUpsertWithWhereUniqueWithoutUserInput = {
    where: CompletedCourseWhereUniqueInput
    update: XOR<CompletedCourseUpdateWithoutUserInput, CompletedCourseUncheckedUpdateWithoutUserInput>
    create: XOR<CompletedCourseCreateWithoutUserInput, CompletedCourseUncheckedCreateWithoutUserInput>
  }

  export type CompletedCourseUpdateWithWhereUniqueWithoutUserInput = {
    where: CompletedCourseWhereUniqueInput
    data: XOR<CompletedCourseUpdateWithoutUserInput, CompletedCourseUncheckedUpdateWithoutUserInput>
  }

  export type CompletedCourseUpdateManyWithWhereWithoutUserInput = {
    where: CompletedCourseScalarWhereInput
    data: XOR<CompletedCourseUpdateManyMutationInput, CompletedCourseUncheckedUpdateManyWithoutUserInput>
  }

  export type CompletedCourseScalarWhereInput = {
    AND?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
    OR?: CompletedCourseScalarWhereInput[]
    NOT?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
    id?: StringFilter<"CompletedCourse"> | string
    name?: StringFilter<"CompletedCourse"> | string
    grade?: StringFilter<"CompletedCourse"> | string
    userId?: StringFilter<"CompletedCourse"> | string
  }

  export type InProgressCourseUpsertWithWhereUniqueWithoutUserInput = {
    where: InProgressCourseWhereUniqueInput
    update: XOR<InProgressCourseUpdateWithoutUserInput, InProgressCourseUncheckedUpdateWithoutUserInput>
    create: XOR<InProgressCourseCreateWithoutUserInput, InProgressCourseUncheckedCreateWithoutUserInput>
  }

  export type InProgressCourseUpdateWithWhereUniqueWithoutUserInput = {
    where: InProgressCourseWhereUniqueInput
    data: XOR<InProgressCourseUpdateWithoutUserInput, InProgressCourseUncheckedUpdateWithoutUserInput>
  }

  export type InProgressCourseUpdateManyWithWhereWithoutUserInput = {
    where: InProgressCourseScalarWhereInput
    data: XOR<InProgressCourseUpdateManyMutationInput, InProgressCourseUncheckedUpdateManyWithoutUserInput>
  }

  export type InProgressCourseScalarWhereInput = {
    AND?: InProgressCourseScalarWhereInput | InProgressCourseScalarWhereInput[]
    OR?: InProgressCourseScalarWhereInput[]
    NOT?: InProgressCourseScalarWhereInput | InProgressCourseScalarWhereInput[]
    id?: StringFilter<"InProgressCourse"> | string
    name?: StringFilter<"InProgressCourse"> | string
    userId?: StringFilter<"InProgressCourse"> | string
  }

  export type PendingCourseUpsertWithWhereUniqueWithoutUserInput = {
    where: PendingCourseWhereUniqueInput
    update: XOR<PendingCourseUpdateWithoutUserInput, PendingCourseUncheckedUpdateWithoutUserInput>
    create: XOR<PendingCourseCreateWithoutUserInput, PendingCourseUncheckedCreateWithoutUserInput>
  }

  export type PendingCourseUpdateWithWhereUniqueWithoutUserInput = {
    where: PendingCourseWhereUniqueInput
    data: XOR<PendingCourseUpdateWithoutUserInput, PendingCourseUncheckedUpdateWithoutUserInput>
  }

  export type PendingCourseUpdateManyWithWhereWithoutUserInput = {
    where: PendingCourseScalarWhereInput
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyWithoutUserInput>
  }

  export type PendingCourseScalarWhereInput = {
    AND?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
    OR?: PendingCourseScalarWhereInput[]
    NOT?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
    id?: StringFilter<"PendingCourse"> | string
    name?: StringFilter<"PendingCourse"> | string
    userId?: StringFilter<"PendingCourse"> | string
  }

  export type UserCreateWithoutCompletedCoursesInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    inProgressCourses?: InProgressCourseCreateNestedManyWithoutUserInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompletedCoursesInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    inProgressCourses?: InProgressCourseUncheckedCreateNestedManyWithoutUserInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompletedCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompletedCoursesInput, UserUncheckedCreateWithoutCompletedCoursesInput>
  }

  export type UserUpsertWithoutCompletedCoursesInput = {
    update: XOR<UserUpdateWithoutCompletedCoursesInput, UserUncheckedUpdateWithoutCompletedCoursesInput>
    create: XOR<UserCreateWithoutCompletedCoursesInput, UserUncheckedCreateWithoutCompletedCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompletedCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompletedCoursesInput, UserUncheckedUpdateWithoutCompletedCoursesInput>
  }

  export type UserUpdateWithoutCompletedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    inProgressCourses?: InProgressCourseUpdateManyWithoutUserNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompletedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    inProgressCourses?: InProgressCourseUncheckedUpdateManyWithoutUserNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutInProgressCoursesInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    completedCourses?: CompletedCourseCreateNestedManyWithoutUserInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInProgressCoursesInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutUserInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInProgressCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInProgressCoursesInput, UserUncheckedCreateWithoutInProgressCoursesInput>
  }

  export type UserUpsertWithoutInProgressCoursesInput = {
    update: XOR<UserUpdateWithoutInProgressCoursesInput, UserUncheckedUpdateWithoutInProgressCoursesInput>
    create: XOR<UserCreateWithoutInProgressCoursesInput, UserUncheckedCreateWithoutInProgressCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInProgressCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInProgressCoursesInput, UserUncheckedUpdateWithoutInProgressCoursesInput>
  }

  export type UserUpdateWithoutInProgressCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUpdateManyWithoutUserNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInProgressCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutUserNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPendingCoursesInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    completedCourses?: CompletedCourseCreateNestedManyWithoutUserInput
    inProgressCourses?: InProgressCourseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPendingCoursesInput = {
    id?: string
    name: string
    surname: string
    username: string
    password: string
    role: string
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutUserInput
    inProgressCourses?: InProgressCourseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPendingCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPendingCoursesInput, UserUncheckedCreateWithoutPendingCoursesInput>
  }

  export type UserUpsertWithoutPendingCoursesInput = {
    update: XOR<UserUpdateWithoutPendingCoursesInput, UserUncheckedUpdateWithoutPendingCoursesInput>
    create: XOR<UserCreateWithoutPendingCoursesInput, UserUncheckedCreateWithoutPendingCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPendingCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPendingCoursesInput, UserUncheckedUpdateWithoutPendingCoursesInput>
  }

  export type UserUpdateWithoutPendingCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUpdateManyWithoutUserNestedInput
    inProgressCourses?: InProgressCourseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPendingCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutUserNestedInput
    inProgressCourses?: InProgressCourseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompletedCourseCreateManyUserInput = {
    id?: string
    name: string
    grade: string
  }

  export type InProgressCourseCreateManyUserInput = {
    id?: string
    name: string
  }

  export type PendingCourseCreateManyUserInput = {
    id?: string
    name: string
  }

  export type CompletedCourseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type InProgressCourseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InProgressCourseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InProgressCourseUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}